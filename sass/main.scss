/*


----------------------------------------------------------
Colors M&S
----------------------------------------------------------
Neutrals
----------------------------------------------------------
Black: #1d1d1b;
Dark grey: #8e8e8e;
Grey: #b1b1b1;
Mid grey: #e1e1e1;
Light grey: #f2f2f2;

Brand
----------------------------------------------------------
Dark green: #8cc7a4;
Mid green: #c0e2c9;
Light green: #e1ece3;

Accents
----------------------------------------------------------
Red: #ed8081;
Amber: #f8d592;

*/

$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;
*,
*::after,
*::before {
  margin: 0;
  padding: 0;

  box-sizing: inherit;
}

html {
  /* we changed to 10px to make our lives easier because 
     now we know 1rem is equal to 10px 
     1rem is exactly the root font size. 
     Assigning px to the font-size then the user cannot 
     set a font-size.*/
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7; /* means 1.7 times bigger with the predefined line height*/
  color: $color-grey-dark;
  padding: 3rem;

  /* change the box model to border box
     so the borders and paddings are not added to the 
     total width or total height that is specified for the
     box.
  */
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-light, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  &__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;

  /* to avoid any jumping for the animation; any element; that is
     the element behind of the animated element can be hidden; 
     e.g. when we are rotating elements. */
  backface-visibility: hidden;

  margin-bottom: 6rem;

  &--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out; /* starts fast and then slows*/
    /*
    animation-delay: 3s;
    animation-iteration-count: 3;
    */
  }

  &--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation: moveInRight 1s ease-out;
  }
}

/*
  ANIMATIONS
*/

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0); /* the way it looks by default final state.*/
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.btn {
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* as is text then is a inline element we changed to block, 
      we always do this if we want to add some paddings top,bottom,left, right*/
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem;
  }

  &:hover {
    transform: translateY(-0.3rem);
    /* 0 x direction 10 y direction 20px blur and a colour with a transparent shadow
         having an opacity of 20%*/
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      /* to fade out*/
      opacity: 0;
    }
  }

  &:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  /* after pseudo element*/
  &::after {
    content: "";
    /* same as the button*/
    display: inline-block;
    /* we take the same dimentions of the button*/
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;

    transition: all 0.4s;
  }

  /* after only when we hover, we want the element to grow and fade out*/

  &--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards
      /* apply the styles before tha animatino starts*/;
  }
}
